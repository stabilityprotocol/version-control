name: Test Stability Blockchain Version Control

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint Scripts
    steps:
      - uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Lint Bash Scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck {} +

      - name: Check Script Permissions
        run: |
          find scripts/ -name "*.sh" -type f ! -executable -exec echo "Missing execute permission: {}" \; -exec exit 1 \;

  test-linux:
    runs-on: ubuntu-latest
    name: Test on Linux
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Make scripts executable
        run: chmod +x scripts/*.sh hooks/post-commit

      - name: Run Quick Test
        run: bash scripts/quick-test.sh
        env:
          STABILITY_NETWORK: testnet

      - name: Test Hook Installation
        run: |
          # Create a test repository
          mkdir test-install
          cd test-install
          git init
          echo "test" > test.txt
          git add test.txt
          git commit -m "Initial commit"

          # Install hook
          bash ../scripts/install-hook.sh << EOF
          testnet

          Test Project

          EOF

          # Verify hook is installed
          test -x .git/hooks/post-commit

          # Test hook execution (should not fail even if network unavailable)
          echo "test2" >> test.txt
          git add test.txt
          git commit -m "Test hook execution"

  test-macos:
    runs-on: macos-latest
    name: Test on macOS
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Make scripts executable
        run: chmod +x scripts/*.sh hooks/post-commit

      - name: Install dependencies
        run: |
          # Ensure we have required tools
          which curl || brew install curl
          which shasum || echo "shasum already available"

      - name: Run Quick Test
        run: bash scripts/quick-test.sh
        env:
          STABILITY_NETWORK: testnet

  test-windows:
    runs-on: windows-latest
    name: Test on Windows (Git Bash)
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run Quick Test (Git Bash)
        shell: bash
        run: bash scripts/quick-test.sh
        env:
          STABILITY_NETWORK: testnet

      - name: Test PowerShell compatibility
        shell: powershell
        run: |
          # Test that scripts can be called from PowerShell
          & "C:\Program Files\Git\bin\bash.exe" -c "bash scripts/quick-test.sh"
        env:
          STABILITY_NETWORK: testnet

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - uses: actions/checkout@v4

      - name: Install git-secrets
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install

      - name: Run git-secrets scan
        run: |
          git secrets --register-aws
          git secrets --scan

      - name: Check for hardcoded secrets
        run: |
          # Check for potential API keys or secrets
          if grep -r "sk-\|pk_\|API_KEY.*=" . --exclude-dir=.git --exclude="*.yml" --exclude="*.md"; then
            echo "Potential secrets found!"
            exit 1
          fi

      - name: Verify no sensitive data in configs
        run: |
          # Ensure config files don't contain real secrets
          if grep -E "(0x[a-fA-F0-9]{40})" config/stability-config.sh | grep -v "0x0000000000000000000000000000000000000000"; then
            echo "Real contract address found in default config!"
            exit 1
          fi

  contract-compilation:
    runs-on: ubuntu-latest
    name: Smart Contract Compilation
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Solidity Compiler
        run: |
          npm install -g solc

      - name: Compile Smart Contracts
        run: |
          cd contracts
          solc --version
          solc --bin --abi CommitRegistry.sol

      - name: Validate Contract Syntax
        run: |
          # Basic syntax validation
          solc --ast-compact-json CommitRegistry.sol | jq . > /dev/null
          echo "Contract syntax validation passed"

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Test (Testnet)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Integration"
          git config --global user.email "integration@github.com"

      - name: Make scripts executable
        run: chmod +x scripts/*.sh hooks/post-commit

      - name: Test Smart Contract Deployment (Testnet)
        run: |
          # Only test deployment if we have access to testnet
          timeout 60 bash scripts/deploy-contract.sh deploy testnet || echo "Testnet deployment test completed (may timeout in CI)"
        env:
          STABILITY_NETWORK: testnet

      - name: Run Full Demo (Testnet)
        run: |
          # Run demo with timeout to prevent hanging
          timeout 120 bash scripts/demo-complete.sh || echo "Demo completed with timeout"
        env:
          STABILITY_NETWORK: testnet

  docs-build:
    runs-on: ubuntu-latest
    name: Documentation Build
    steps:
      - uses: actions/checkout@v4

      - name: Check Documentation Links
        run: |
          # Simple link checker for markdown files
          find . -name "*.md" -exec grep -l "http" {} \; | while read file; do
            echo "Checking links in $file"
            # Extract URLs and check basic format
            grep -oE 'https?://[^\s\)]+' "$file" | head -10
          done

      - name: Validate Markdown Syntax
        run: |
          # Check for basic markdown syntax issues
          find . -name "*.md" -exec echo "Checking {}" \; -exec head -1 {} \;

      - name: Check for Required Files
        run: |
          required_files=(
            "README.md"
            "LICENSE"
            "CHANGELOG.md"
            "CONTRIBUTING.md"
            "SECURITY.md"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "Required file missing: $file"
              exit 1
            fi
          done
          echo "All required files present"
